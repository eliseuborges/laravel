name: Laravel

on:
  workflow_dispatch:
    inputs:
      versionName:
        description: 'Name of version  (ie 5.5.0)'
        required: true
      versionCode:
        description: 'Version number (50500)'
        required: true
        
  push:
    branches: [ master ]
#  pull_request:
#    branches: [ master ]

jobs:

  tests:
    name: Tests
    runs-on: ubuntu-latest
#    needs: [build-backend]
    steps:
    - uses: actions/checkout@v2
    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"
    - name: Install Dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
    - name: Dependency Check
      uses: umutphp/sensiolabs-security-checker-action@v1
    - name: Generate key
      run: php artisan key:generate
#    - name: Directory Permissions
#      run: chmod -R 777 storage bootstrap/cache
    - name: Create Database
      run: |
        mkdir -p database
        touch database/database.sqlite
    - name: Execute tests (Unit and Feature tests) via PHPUnit
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite
      run: vendor/bin/phpunit

  build-frontend:
    name: Build Front-End
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2 # Download the source code
      - name: NPM Build
        run: |
          npm install
          npm run production
      - name: Upload build files
        uses: actions/upload-artifact@v2
        with:
          name: assets
          path: public
  
  build-backend:
    name: Build Back-End
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2      
      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"
      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
      - name: Generate key
        run: php artisan key:generate
#      - name: Upload build files
#        uses: actions/upload-artifact@v2
#        with:
#          name: files
#          path: .
  
  
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend, tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Git Semantic Version
        id: semantic_version
        uses: PaulHatch/semantic-version@v3.1.2
        with:
          tag_prefix: "v"
          format: "v${major}.${minor}.${patch}"      
      
      - run: echo ${{ steps.semantic_version.outputs.version }} > .VERSION.txt
      - uses: actions/upload-artifact@v2
        with:
          name: my-artifact
          path: .VERSION.txt
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.semantic_version.outputs.version }}
          release_name: ${{ steps.semantic_version.outputs.version }}
#          body: | 
#            Release Notes:
#            - Change 1
#            - Change 2
          draft: false
          prerelease: false
      
#  deploy:
#    name: Deploy to Production
#    runs-on: ubuntu-latest
#    needs: [build]
#    if: github.ref == 'refs/heads/master'
#    steps:
#      - uses: actions/checkout@v1
#      - name: Download build assets
#        uses: actions/download-artifact@v1
#        with:
#          name: assets
#          path: public
#      - name: Setup PHP
#        uses: shivammathur/setup-php@master
#        with:
#          php-version: 7.3
#          extension-csv: mbstring, bcmath
#      - name: Composer install
#        run: composer install
#      - name: Setup Deployer
#        uses: atymic/deployer-php-action@master
#        with:
#          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
#          ssh-known-hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
#      - name: Deploy to Prod
#        env:
#          DOT_ENV: ${{ secrets.DOT_ENV }}
#        run: dep deploy production --tag=${{ env.GITHUB_REF }} -vvv
